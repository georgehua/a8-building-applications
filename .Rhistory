shiny::runApp('lecture-14-exercises/exercise-2')
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
View(data)
info_function <- function(dataset) {
ret <- list()
ret$length <- length(dataset)
# do some more interesting stuff
return (ret)
}
info_function
info_function(data)
colnames(data)
?ret()
class(data)
?grep()
data %>% grep(Are.you.a.Seahawks.fan., "Y")
grep(data$Are.you.a.Seahawks.fan., "Y")
grep("Y", data$Are.you.a.Seahawks.fan.)
grep(Y, data$Are.you.a.Seahawks.fan.)
grep('Y', data$Are.you.a.Seahawks.fan.)
length(data[grep('Y', Are.you.a.Seahawks.fan.),])
length(data[grep('Y', data$Are.you.a.Seahawks.fan.),])
grep('Y', data$Are.you.a.Seahawks.fan.)
grep('e', data$Are.you.a.Seahawks.fan.)
grep('n', data$Are.you.a.Seahawks.fan.)
grep('o', data$Are.you.a.Seahawks.fan.)
length(grep('Y', data$Are.you.a.Seahawks.fan.))
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(length(What.is.your.current.class.standing.)))
data %>%
group_by(What.is.your.current.class.standing.) %>%
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(length(What.is.your.current.class.standing.)))
data %>%
group_by(What.is.your.current.class.standing.) %>%
filter(What.is.your.current.class.standing. == max(length(What.is.your.current.class.standing.)))
data %>%
group_by(What.is.your.current.class.standing.) %>%
filter(What.is.your.current.class.standing. = max(length(What.is.your.current.class.standing.)))
read <- data %>%
group_by(What.is.your.current.class.standing.) %>%
filter(What.is.your.current.class.standing. = max(length(What.is.your.current.class.standing.)))
read <- data %>%
group_by(What.is.your.current.class.standing.) %>%
filter(What.is.your.current.class.standing. == max(length(What.is.your.current.class.standing.)))
library(dplyr)
read <- data %>%
group_by(What.is.your.current.class.standing.) %>%
filter(What.is.your.current.class.standing. == max(length(What.is.your.current.class.standing.)))
View(read)
read <- data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(length(What.is.your.current.class.standing.)))
View(read)
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = min(length(What.is.your.current.class.standing.)))
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(n(What.is.your.current.class.standing.)))
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(n()))
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(n())) %>%
select(highest = max(highest))
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(n())) %>%
select(highest == max(highest))
data %>%
group_by(What.is.your.current.class.standing.) %>%
summarize(highest = max(n())) %>%
filter(highest == max(highest))
---
shiny::runApp('lecture-15-exercises/example-1')
### Example from plotly ###
shiny::runApp('lecture-15-exercises/exercise-1')
shiny::runApp('lecture-15-exercises/exercise-1')
shiny::runApp('lecture-15-exercises/exercise-1')
shiny::runApp('lecture-15-exercises/exercise-1')
shiny::runApp('lecture-15-exercises/exercise-1')
shiny::runApp('lecture-15-exercises/exercise-1')
cars <- rnorm(n = 100, mean = 50, sd = 5)
cars
?lapply()
new_group
cars <- rnorm(n = 100, mean = 50, sd = 5)
slower_than <- function(index) {
return(cars[index] < min(cars[1:index - 1]))
}
new_group <- lapply(2:length(cars), slower_than)
new_group
length(new_group)
length(new_group)
cars <- rnorm(n = 100, mean = 50, sd = 5)
length(new_group)
cars <- rnorm(n = 100, mean = 50, sd = 5)
slower_than <- function(index) {
return(cars[index] < min(cars[1:index - 1]))
}
new_group <- lapply(2:length(cars), slower_than)
length(new_group)
cars <- rnorm(n = 100, mean = 50, sd = 5)
cars
cars
length(new_group)
simulate_groups <- function() {
# Simulate 100 cars w/mean speed 50
cars <- rnorm(n = 1000, mean = 50, sd = 5)
# A function to determine if a car is slower than all of the cars
# in front of it (which createa a new group of cars **behind** it)
slower_than <- function(index) {
return(cars[index] < min(cars[1:index - 1]))
}
# Apply the slower_than function to all of the cars
new_group <- lapply(2:length(cars), slower_than)
# Determine number of groups created
groups <- length(new_group[new_group == TRUE]) + 1
return(groups)
}
simulate_groups()
simulate_groups()
simulate_groups()
simulate_groups()
simulate_groups()
simulate_groups()
simulate_groups()
repeat_simulation <- function(num_sims) {
# Create an empty vector to store your results
results <- vector()
# Run your simulation 100 times, and track your results
for(i in 1:num_sims) {
results <- c(results, simulate_groups())
}
# Work with your results
hist(results)
return(mean(results))
}
hist(results)
library("iris")
data("iris")
data(iris)
data(iris)
data(iris)
data <- data(iris)
data()
data(iris)
data(iris)
dataset("iris")
data(iris)
View(iris)
dataset <- data(iris)
data(iris)
View(iris)
data(iris)
View(iris)
data(iris)
data(iris)
View(iris)
unique(species)
unique(iris$species)
nrow(species)
nrow(iris)
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
type <- iris %>%
group_by(species) %>%
summarse()
class(iris)
type <- iris %>%
group_by(Species) %>%
summarse()
type <- iris %>%
group_by(Species) %>%
summarse(Species)
unique(iris$Species)
shiny::runApp('a8-building-applications')
### Example from plotly ###
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(df, z = eval(parse(text = column)), text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = eval(parse(text = column)), colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g) %>%
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
colnames(data)
colnames(iris)
""unique(iris$Species)
unique(iris$Species)
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
source("scripts/build_scatter.R")
source("scripts/build_scatter.r")
wd
source("a8-building-applications/scripts/build_scatter.r")
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
getwd()
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
setwd("/Users/hongtianxuhua/Documents/info498f/a8-building-applications/")
source("scripts/build_scatter.r")
View(build_scatter)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Documents/info498f/lecture-15-exercises/exercise-2')
shiny::runApp('~/Documents/info498f/lecture-15-exercises/exercise-2')
shiny::runApp('~/Documents/info498f/lecture-15-exercises/exercise-2')
df %>% plot_ly(
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?parse()
shiny::runApp('~/Documents/info498f/lecture-15-exercises/exercise-2')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
df %>% filter(Species == class) %>%
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colnames(iris)
iris %>%  filter(Sepal.Length == max(Sepal.Length))
iris %>%  filter(Species == setoso)
iris %>%  filter(Species == setosa)
iris %>%  filter(Species == "setosa")
iris %>%  filter(Species == "setosa") %>%
[,"Sepal.Length"]
iris %>%  filter(Species == "setosa") %>% select("Sepal.Length")
iris %>%  filter(Species == "setosa") %>% select(Sepal.Length)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?eval()
?parse()
shiny::runApp('~/Documents/info498f/lab-8')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
